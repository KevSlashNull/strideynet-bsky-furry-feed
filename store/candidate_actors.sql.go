// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: candidate_actors.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidateActor = `-- name: CreateCandidateActor :exec
INSERT INTO
    candidate_actors (did, created_at, is_artist, comment)
VALUES
    ($1, $2, $3, $4)
`

type CreateCandidateActorParams struct {
	DID       string
	CreatedAt pgtype.Timestamptz
	IsArtist  bool
	Comment   string
}

func (q *Queries) CreateCandidateActor(ctx context.Context, arg CreateCandidateActorParams) error {
	_, err := q.db.Exec(ctx, createCandidateActor,
		arg.DID,
		arg.CreatedAt,
		arg.IsArtist,
		arg.Comment,
	)
	return err
}

const getCandidateActorByDID = `-- name: GetCandidateActorByDID :one
SELECT did, created_at, is_artist, comment, is_nsfw, is_hidden
FROM
    candidate_actors
WHERE
    did = $1
`

func (q *Queries) GetCandidateActorByDID(ctx context.Context, did string) (CandidateActor, error) {
	row := q.db.QueryRow(ctx, getCandidateActorByDID, did)
	var i CandidateActor
	err := row.Scan(
		&i.DID,
		&i.CreatedAt,
		&i.IsArtist,
		&i.Comment,
		&i.IsNSFW,
		&i.IsHidden,
	)
	return i, err
}

const listCandidateActors = `-- name: ListCandidateActors :many
SELECT did, created_at, is_artist, comment, is_nsfw, is_hidden
FROM
    candidate_actors
ORDER BY
    did
`

func (q *Queries) ListCandidateActors(ctx context.Context) ([]CandidateActor, error) {
	rows, err := q.db.Query(ctx, listCandidateActors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidateActor
	for rows.Next() {
		var i CandidateActor
		if err := rows.Scan(
			&i.DID,
			&i.CreatedAt,
			&i.IsArtist,
			&i.Comment,
			&i.IsNSFW,
			&i.IsHidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
