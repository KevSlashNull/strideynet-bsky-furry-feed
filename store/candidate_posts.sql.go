// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: candidate_posts.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidatePost = `-- name: CreateCandidatePost :exec
INSERT INTO
    candidate_posts (uri, actor_did, created_at, indexed_at)
VALUES
    ($1, $2, $3, $4)
`

type CreateCandidatePostParams struct {
	URI       string
	ActorDID  string
	CreatedAt pgtype.Timestamptz
	IndexedAt pgtype.Timestamptz
}

func (q *Queries) CreateCandidatePost(ctx context.Context, arg CreateCandidatePostParams) error {
	_, err := q.db.Exec(ctx, createCandidatePost,
		arg.URI,
		arg.ActorDID,
		arg.CreatedAt,
		arg.IndexedAt,
	)
	return err
}

const listCandidatePostsForFeed = `-- name: ListCandidatePostsForFeed :many
SELECT
    cp.uri, cp.actor_did, cp.created_at, cp.indexed_at, cp.is_nsfw, cp.is_hidden
FROM
    candidate_posts cp
        LEFT JOIN candidate_actors ca ON cp.actor_did = ca.did
WHERE
      cp.is_hidden = false
  AND ca.is_hidden = false
ORDER BY
    cp.created_at DESC
LIMIT $1
`

func (q *Queries) ListCandidatePostsForFeed(ctx context.Context, limit int32) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, listCandidatePostsForFeed, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.ActorDID,
			&i.CreatedAt,
			&i.IndexedAt,
			&i.IsNSFW,
			&i.IsHidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCandidatePostsForFeedWithCursor = `-- name: ListCandidatePostsForFeedWithCursor :many
SELECT
    cp.uri, cp.actor_did, cp.created_at, cp.indexed_at, cp.is_nsfw, cp.is_hidden
FROM
    candidate_posts cp
        INNER JOIN candidate_actors ca ON cp.actor_did = ca.did
WHERE
      cp.is_hidden = false
  AND ca.is_hidden = false
  AND cp.created_at < $1
ORDER BY
    cp.created_at DESC
LIMIT $2
`

type ListCandidatePostsForFeedWithCursorParams struct {
	CreatedAt pgtype.Timestamptz
	Limit     int32
}

func (q *Queries) ListCandidatePostsForFeedWithCursor(ctx context.Context, arg ListCandidatePostsForFeedWithCursorParams) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, listCandidatePostsForFeedWithCursor, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.ActorDID,
			&i.CreatedAt,
			&i.IndexedAt,
			&i.IsNSFW,
			&i.IsHidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCandidatePostsForHotFeed = `-- name: ListCandidatePostsForHotFeed :many
SELECT
    cp.uri, cp.actor_did, cp.created_at, cp.indexed_at, cp.is_nsfw, cp.is_hidden
FROM
    candidate_posts cp
        INNER JOIN candidate_actors ca ON cp.actor_did = ca.did
        INNER JOIN candidate_likes cl ON cp.uri = cl.subject_uri
WHERE
      cp.is_hidden = false
  AND ca.is_hidden = false
GROUP BY
    cp.uri
HAVING
    count(*) > 5
ORDER BY
    cp.created_at DESC
LIMIT $1
`

func (q *Queries) ListCandidatePostsForHotFeed(ctx context.Context, limit int32) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, listCandidatePostsForHotFeed, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.ActorDID,
			&i.CreatedAt,
			&i.IndexedAt,
			&i.IsNSFW,
			&i.IsHidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCandidatePostsForHotFeedWithCursor = `-- name: ListCandidatePostsForHotFeedWithCursor :many
SELECT
    cp.uri, cp.actor_did, cp.created_at, cp.indexed_at, cp.is_nsfw, cp.is_hidden
FROM
    candidate_posts cp
        INNER JOIN candidate_actors ca ON cp.actor_did = ca.did
        INNER JOIN candidate_likes cl ON cp.uri = cl.subject_uri
WHERE
      cp.is_hidden = false
  AND ca.is_hidden = false
  AND cp.created_at < $1
GROUP BY
    cp.uri
HAVING
    count(*) > 5
ORDER BY
    cp.created_at DESC
LIMIT $2
`

type ListCandidatePostsForHotFeedWithCursorParams struct {
	CreatedAt pgtype.Timestamptz
	Limit     int32
}

func (q *Queries) ListCandidatePostsForHotFeedWithCursor(ctx context.Context, arg ListCandidatePostsForHotFeedWithCursorParams) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, listCandidatePostsForHotFeedWithCursor, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.ActorDID,
			&i.CreatedAt,
			&i.IndexedAt,
			&i.IsNSFW,
			&i.IsHidden,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
