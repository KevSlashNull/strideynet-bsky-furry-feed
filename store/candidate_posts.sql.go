// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: candidate_posts.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidatePost = `-- name: CreateCandidatePost :exec
INSERT INTO candidate_posts (
    uri, repository_did, created_at, indexed_at
) VALUES (
    $1, $2, $3, $4
 )
`

type CreateCandidatePostParams struct {
	URI           string
	RepositoryDID string
	CreatedAt     pgtype.Timestamptz
	IndexedAt     pgtype.Timestamptz
}

func (q *Queries) CreateCandidatePost(ctx context.Context, arg CreateCandidatePostParams) error {
	_, err := q.db.Exec(ctx, createCandidatePost,
		arg.URI,
		arg.RepositoryDID,
		arg.CreatedAt,
		arg.IndexedAt,
	)
	return err
}

const listCandidatePostsForFeed = `-- name: ListCandidatePostsForFeed :many
SELECT uri, repository_did, created_at, indexed_at FROM candidate_posts ORDER BY created_at DESC LIMIT $1
`

func (q *Queries) ListCandidatePostsForFeed(ctx context.Context, limit int32) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, listCandidatePostsForFeed, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.RepositoryDID,
			&i.CreatedAt,
			&i.IndexedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCandidatePostsForFeedWithCursor = `-- name: ListCandidatePostsForFeedWithCursor :many
SELECT uri, repository_did, created_at, indexed_at FROM candidate_posts WHERE created_at < $1 ORDER BY created_at DESC LIMIT $2
`

type ListCandidatePostsForFeedWithCursorParams struct {
	CreatedAt pgtype.Timestamptz
	Limit     int32
}

func (q *Queries) ListCandidatePostsForFeedWithCursor(ctx context.Context, arg ListCandidatePostsForFeedWithCursorParams) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, listCandidatePostsForFeedWithCursor, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.RepositoryDID,
			&i.CreatedAt,
			&i.IndexedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
