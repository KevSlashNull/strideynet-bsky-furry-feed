// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: candidate_repositories.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCandidateRepository = `-- name: CreateCandidateRepository :exec
INSERT INTO candidate_repositories (
    did, created_at, is_artist, comment
) VALUES (
    $1, $2, $3, $4
)
`

type CreateCandidateRepositoryParams struct {
	DID       string
	CreatedAt pgtype.Timestamptz
	IsArtist  bool
	Comment   string
}

func (q *Queries) CreateCandidateRepository(ctx context.Context, arg CreateCandidateRepositoryParams) error {
	_, err := q.db.Exec(ctx, createCandidateRepository,
		arg.DID,
		arg.CreatedAt,
		arg.IsArtist,
		arg.Comment,
	)
	return err
}

const listCandidateRepositories = `-- name: ListCandidateRepositories :many
SELECT did, created_at, is_artist, comment FROM candidate_repositories
ORDER BY did
`

func (q *Queries) ListCandidateRepositories(ctx context.Context) ([]CandidateRepository, error) {
	rows, err := q.db.Query(ctx, listCandidateRepositories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidateRepository
	for rows.Next() {
		var i CandidateRepository
		if err := rows.Scan(
			&i.DID,
			&i.CreatedAt,
			&i.IsArtist,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const seedCandidateRepository = `-- name: SeedCandidateRepository :exec
INSERT INTO candidate_repositories (
    did, created_at, is_artist, comment
) VALUES (
             $1, $2, $3, $4
         )
ON CONFLICT DO NOTHING
`

type SeedCandidateRepositoryParams struct {
	DID       string
	CreatedAt pgtype.Timestamptz
	IsArtist  bool
	Comment   string
}

func (q *Queries) SeedCandidateRepository(ctx context.Context, arg SeedCandidateRepositoryParams) error {
	_, err := q.db.Exec(ctx, seedCandidateRepository,
		arg.DID,
		arg.CreatedAt,
		arg.IsArtist,
		arg.Comment,
	)
	return err
}
