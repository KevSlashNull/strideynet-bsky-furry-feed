// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/bff/moderation/v1/moderation_service.proto

package moderationv1pbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/strideynet/bsky-furry-feed/proto/bff/moderation/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ModerationServiceName is the fully-qualified name of the ModerationService service.
	ModerationServiceName = "bff.moderation.v1.ModerationService"
)

// ModerationServiceClient is a client for the bff.moderation.v1.ModerationService service.
type ModerationServiceClient interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	GetCandidateActor(context.Context, *connect_go.Request[v1.GetCandidateActorRequest]) (*connect_go.Response[v1.GetCandidateActorResponse], error)
	ListCandidateActors(context.Context, *connect_go.Request[v1.ListCandidateActorsRequest]) (*connect_go.Response[v1.ListCandidateActorsResponse], error)
	ListCandidatePosts(context.Context, *connect_go.Request[v1.ListCandidatePostsRequest]) (*connect_go.Response[v1.ListCandidatePostsResponse], error)
	ListCandidateLikes(context.Context, *connect_go.Request[v1.ListCandidateLikesRequest]) (*connect_go.Response[v1.ListCandidateLikesResponse], error)
	ListCandidateFollows(context.Context, *connect_go.Request[v1.ListCandidateFollowsRequest]) (*connect_go.Response[v1.ListCandidateFollowsResponse], error)
}

// NewModerationServiceClient constructs a client for the bff.moderation.v1.ModerationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewModerationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ModerationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &moderationServiceClient{
		ping: connect_go.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+"/bff.moderation.v1.ModerationService/Ping",
			opts...,
		),
		getCandidateActor: connect_go.NewClient[v1.GetCandidateActorRequest, v1.GetCandidateActorResponse](
			httpClient,
			baseURL+"/bff.moderation.v1.ModerationService/GetCandidateActor",
			opts...,
		),
		listCandidateActors: connect_go.NewClient[v1.ListCandidateActorsRequest, v1.ListCandidateActorsResponse](
			httpClient,
			baseURL+"/bff.moderation.v1.ModerationService/ListCandidateActors",
			opts...,
		),
		listCandidatePosts: connect_go.NewClient[v1.ListCandidatePostsRequest, v1.ListCandidatePostsResponse](
			httpClient,
			baseURL+"/bff.moderation.v1.ModerationService/ListCandidatePosts",
			opts...,
		),
		listCandidateLikes: connect_go.NewClient[v1.ListCandidateLikesRequest, v1.ListCandidateLikesResponse](
			httpClient,
			baseURL+"/bff.moderation.v1.ModerationService/ListCandidateLikes",
			opts...,
		),
		listCandidateFollows: connect_go.NewClient[v1.ListCandidateFollowsRequest, v1.ListCandidateFollowsResponse](
			httpClient,
			baseURL+"/bff.moderation.v1.ModerationService/ListCandidateFollows",
			opts...,
		),
	}
}

// moderationServiceClient implements ModerationServiceClient.
type moderationServiceClient struct {
	ping                 *connect_go.Client[v1.PingRequest, v1.PingResponse]
	getCandidateActor    *connect_go.Client[v1.GetCandidateActorRequest, v1.GetCandidateActorResponse]
	listCandidateActors  *connect_go.Client[v1.ListCandidateActorsRequest, v1.ListCandidateActorsResponse]
	listCandidatePosts   *connect_go.Client[v1.ListCandidatePostsRequest, v1.ListCandidatePostsResponse]
	listCandidateLikes   *connect_go.Client[v1.ListCandidateLikesRequest, v1.ListCandidateLikesResponse]
	listCandidateFollows *connect_go.Client[v1.ListCandidateFollowsRequest, v1.ListCandidateFollowsResponse]
}

// Ping calls bff.moderation.v1.ModerationService.Ping.
func (c *moderationServiceClient) Ping(ctx context.Context, req *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// GetCandidateActor calls bff.moderation.v1.ModerationService.GetCandidateActor.
func (c *moderationServiceClient) GetCandidateActor(ctx context.Context, req *connect_go.Request[v1.GetCandidateActorRequest]) (*connect_go.Response[v1.GetCandidateActorResponse], error) {
	return c.getCandidateActor.CallUnary(ctx, req)
}

// ListCandidateActors calls bff.moderation.v1.ModerationService.ListCandidateActors.
func (c *moderationServiceClient) ListCandidateActors(ctx context.Context, req *connect_go.Request[v1.ListCandidateActorsRequest]) (*connect_go.Response[v1.ListCandidateActorsResponse], error) {
	return c.listCandidateActors.CallUnary(ctx, req)
}

// ListCandidatePosts calls bff.moderation.v1.ModerationService.ListCandidatePosts.
func (c *moderationServiceClient) ListCandidatePosts(ctx context.Context, req *connect_go.Request[v1.ListCandidatePostsRequest]) (*connect_go.Response[v1.ListCandidatePostsResponse], error) {
	return c.listCandidatePosts.CallUnary(ctx, req)
}

// ListCandidateLikes calls bff.moderation.v1.ModerationService.ListCandidateLikes.
func (c *moderationServiceClient) ListCandidateLikes(ctx context.Context, req *connect_go.Request[v1.ListCandidateLikesRequest]) (*connect_go.Response[v1.ListCandidateLikesResponse], error) {
	return c.listCandidateLikes.CallUnary(ctx, req)
}

// ListCandidateFollows calls bff.moderation.v1.ModerationService.ListCandidateFollows.
func (c *moderationServiceClient) ListCandidateFollows(ctx context.Context, req *connect_go.Request[v1.ListCandidateFollowsRequest]) (*connect_go.Response[v1.ListCandidateFollowsResponse], error) {
	return c.listCandidateFollows.CallUnary(ctx, req)
}

// ModerationServiceHandler is an implementation of the bff.moderation.v1.ModerationService service.
type ModerationServiceHandler interface {
	Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error)
	GetCandidateActor(context.Context, *connect_go.Request[v1.GetCandidateActorRequest]) (*connect_go.Response[v1.GetCandidateActorResponse], error)
	ListCandidateActors(context.Context, *connect_go.Request[v1.ListCandidateActorsRequest]) (*connect_go.Response[v1.ListCandidateActorsResponse], error)
	ListCandidatePosts(context.Context, *connect_go.Request[v1.ListCandidatePostsRequest]) (*connect_go.Response[v1.ListCandidatePostsResponse], error)
	ListCandidateLikes(context.Context, *connect_go.Request[v1.ListCandidateLikesRequest]) (*connect_go.Response[v1.ListCandidateLikesResponse], error)
	ListCandidateFollows(context.Context, *connect_go.Request[v1.ListCandidateFollowsRequest]) (*connect_go.Response[v1.ListCandidateFollowsResponse], error)
}

// NewModerationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewModerationServiceHandler(svc ModerationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/bff.moderation.v1.ModerationService/Ping", connect_go.NewUnaryHandler(
		"/bff.moderation.v1.ModerationService/Ping",
		svc.Ping,
		opts...,
	))
	mux.Handle("/bff.moderation.v1.ModerationService/GetCandidateActor", connect_go.NewUnaryHandler(
		"/bff.moderation.v1.ModerationService/GetCandidateActor",
		svc.GetCandidateActor,
		opts...,
	))
	mux.Handle("/bff.moderation.v1.ModerationService/ListCandidateActors", connect_go.NewUnaryHandler(
		"/bff.moderation.v1.ModerationService/ListCandidateActors",
		svc.ListCandidateActors,
		opts...,
	))
	mux.Handle("/bff.moderation.v1.ModerationService/ListCandidatePosts", connect_go.NewUnaryHandler(
		"/bff.moderation.v1.ModerationService/ListCandidatePosts",
		svc.ListCandidatePosts,
		opts...,
	))
	mux.Handle("/bff.moderation.v1.ModerationService/ListCandidateLikes", connect_go.NewUnaryHandler(
		"/bff.moderation.v1.ModerationService/ListCandidateLikes",
		svc.ListCandidateLikes,
		opts...,
	))
	mux.Handle("/bff.moderation.v1.ModerationService/ListCandidateFollows", connect_go.NewUnaryHandler(
		"/bff.moderation.v1.ModerationService/ListCandidateFollows",
		svc.ListCandidateFollows,
		opts...,
	))
	return "/bff.moderation.v1.ModerationService/", mux
}

// UnimplementedModerationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedModerationServiceHandler struct{}

func (UnimplementedModerationServiceHandler) Ping(context.Context, *connect_go.Request[v1.PingRequest]) (*connect_go.Response[v1.PingResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bff.moderation.v1.ModerationService.Ping is not implemented"))
}

func (UnimplementedModerationServiceHandler) GetCandidateActor(context.Context, *connect_go.Request[v1.GetCandidateActorRequest]) (*connect_go.Response[v1.GetCandidateActorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bff.moderation.v1.ModerationService.GetCandidateActor is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListCandidateActors(context.Context, *connect_go.Request[v1.ListCandidateActorsRequest]) (*connect_go.Response[v1.ListCandidateActorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bff.moderation.v1.ModerationService.ListCandidateActors is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListCandidatePosts(context.Context, *connect_go.Request[v1.ListCandidatePostsRequest]) (*connect_go.Response[v1.ListCandidatePostsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bff.moderation.v1.ModerationService.ListCandidatePosts is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListCandidateLikes(context.Context, *connect_go.Request[v1.ListCandidateLikesRequest]) (*connect_go.Response[v1.ListCandidateLikesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bff.moderation.v1.ModerationService.ListCandidateLikes is not implemented"))
}

func (UnimplementedModerationServiceHandler) ListCandidateFollows(context.Context, *connect_go.Request[v1.ListCandidateFollowsRequest]) (*connect_go.Response[v1.ListCandidateFollowsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bff.moderation.v1.ModerationService.ListCandidateFollows is not implemented"))
}
